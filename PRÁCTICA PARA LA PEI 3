import numpy as np
import scipy as sp

################### GAUSS ########################
def gauss (A, b):
    A = np.array(A, dtype= float)
    b = np.array(b, dtype= float)
    n = len(b) # =len(A)
    
    # Eliminación Gaussiana
    for k in range (n):
        """#PIVOTAMIENTO

        # Buscar el máximo en la columna k desde la fila k en adelante
        max_row = np.argmax(np.abs(A[k:n, k])) + k
        if A[max_row, k] == 0:
            raise ValueError("El sistema no tiene solución única.")

        # Intercambiar filas en A y b
        if max_row != k:
            A[[k, max_row]] = A[[max_row, k]]
            b[[k, max_row]] = b[[max_row, k]]"""
        for i in range (k+1, n):
            L_ik = A[i, k]/A[k, k]
            for j in range (k+1, n):
                A[i, j] -= L_ik * A[k, j]
            b[i] -= L_ik * b[k]

    # Sustitución Regresiva
    x = np.zeros(n)
    for i in range (n-1 , 0-1, -1):
        suma = 0
        for j in range (i+1, n):
            suma += A[i, j] * x[j]
        x[i] = (b[i] - suma) / A[i, i]
    return x
         
A = [[1, 1, 1],
     [2, 1, -1],
     [3, -1, 1]]
b = [6, 4, 7]
print("Solución:", gauss(A, b))
print ("Solución (NumPy):", np.linalg.solve(np.array(A), np.array(b))) # comparamos


########## FACTORIZACIÓN LU #############

# Factorización LU (hallar las matrices L y U)
def factorizacion_LU (A):
    n = len(A)
    A = np.array(A, dtype= float)
    L = np.zeros((n,n))
    U = A.copy()
    for k in range (n):
        L [k, k] = 1
        for i in range (k+1, n):
            L[i, k] = U[i, k] / U[k, k]
            U [i, k:] -= L[i, k] * U[k, k:]
    return L, U

A = [[1, 1, 1],
     [2, 1, -1],
     [3, -1, 1]]
print ("Matriz L: ", factorizacion_LU(A)[0])
print ("Matriz U: ", factorizacion_LU(A)[1])
# comprobamos
P, L, U = sp.linalg.lu(A)
print ("Matriz L: ", L)
print ("Matriz U: ", U)

########## RESOLUCIÓN DE SISTEMAS LINEALES CON FACTORIZACIÓN LU #############
def resolver_sistema_LU (A, b):
    P,L,U = sp.linalg.lu(A)
    b_permut = np.dot(P, b) # se podría haber hecho también por P @ b al ser dos matrices
    # 1 Sustitución progresiva (Ly = b_permut)
    y = np.linalg.solve(L, b_permut)
    # 2 Sustitución regresiva (Ux = y)
    x = np.linalg.solve(U, y)
    return x
print ("Solución: ", resolver_sistema_LU(A, b))
print ("Solución (NumPy): ", np.linalg.solve(np.array(A), np.array(b))) # comparamos

############ DETERMINANTES POR LU ##############
# det_A = det_U
det_U = np.linalg.det(np.array(A))
det_A = det_U
print ("Determinante: ", det_A)
print ("Determinante (NumPy): ", np.linalg.det(np.array(A))) # comparamos

############ INVERSA POR LU ##############
def inversa_LU(A):
    P, L, U = sp.linalg.lu(A)
    I = np.eye(len(A))
    # 1 Hallamos Ly=P^t * I
    y = np.linalg.solve(L, P.T @ I)
    # 2 Hallamos Ux = y
    x = np.linalg.solve(U, y)
    return x
print ("Inversa: ", inversa_LU(A))
print( "Inversa (NumPy): ", np.linalg.inv(np.array(A))) # comparamos

############ CONDICIONAMIENTO DE UNA MATRIZ ##############
def condicionamiento(A):
    A_inversa = np.linalg.inv(A)
    norma_A = np.linalg.norm(A, ord=2)
    norma_A_inv = np.linalg.norm(A_inversa, ord=2)
    condicionamiento = norma_A * norma_A_inv
    return condicionamiento
print ("Condicionamiento: ", condicionamiento(A))
print ("Condicionamiento (NumPy): ", np.linalg.cond(np.array(A))) # comparamos


############# MÉTODOS ITERATIVOS ##############

A = np.array([[10, 2, 1],
               [3, 15, 1],
               [2, 1, 20]], dtype=float)
b = np.array([12, 17, 25], dtype=float)
# Definir D,L,U
def definir_DLU (A):
    N = len(A)
    D = np.zeros((N,N))
    L = np.zeros((N,N))
    U = np.zeros((N,N))
    for i in range (N):
        for j in range (N):
            if i == j:
                D[i, j] = A[i, j]
            elif i < j:
                L[i, j] = A[i, j]
            else:
                U[i, j] = A[i, j]
    return D, L, U

D, L, U = definir_DLU(A)
# Definimos tol y max_iter (lo elegimos nosotros)
tol = 1e-6
max_iter = 100

########## JACOBI ##########
def jacobi (A, b, D, L, U, tol, max_iter):
    n = len(A)
    T = -np.linalg.inv(D) @ (L + U)
    c = np.linalg.inv(D) @ b
    x = np.zeros(n)
    for k in range (max_iter):
        x_nuevo = T @ x + c
        error = np.linalg.norm(x_nuevo - x, ord= np.inf) / np.linalg.norm( x_nuevo, ord= np.inf)
        
        if error < tol:
            return x_nuevo
        x = x_nuevo
    return "No converge"

print ("Jacobi: ", jacobi(A, b, D, L, U, tol, max_iter))
print ("Jacobi (NumPy): ", np.linalg.solve(np.array(A), np.array(b))) # comparamos

########## GAUSS-SEIDEL ##########
def gauss_seidel (A, b, D, L, U, tol, max_iter):
    n = len(A)
    T = -np.linalg.inv(D + L) @ U
    c = np.linalg.inv(D + L) @ b
    x = np.zeros(n)
    for k in range (max_iter):
        x_nuevo = T @ x + c
        error = np.linalg.norm(x_nuevo - x, ord= np.inf) / np.linalg.norm( x_nuevo, ord= np.inf)
        
        if error < tol:
            return x_nuevo
        x = x_nuevo
    return "No converge"

print ("Gauss-Seidel: ", jacobi(A, b, D, L, U, tol, max_iter))








########### MÉTODO DE LA POTENCIA ########### Aλ = λu
import numpy as np
def metodo_potencia (A, u_max, max_iter, tol):

    lambda_max = np.linalg.norm(u_max, ord=2) # lambda_max = np.sqrt(sum(u_max*u_max)) ES LO MISMO
    u_max = u_max / lambda_max

    for i in range (max_iter):
        u_new = A @ u_max
        lambda_new = np.linalg.norm(u_new, ord=2)

        if u_max @ u_new < 0:
            lambda_max = -lambda_new
        else:
            lambda_max = lambda_new
        u_new = u_new / lambda_max
        
        if np.linalg.norm(u_max - u_new, ord=2) < tol:
            return lambda_new, u_new
    return lambda_new, u_new


u_max = np.array([1, 1])
tol = 1e-6
max_iter = 100
A = np.array([[1, 0], [1, 3]], dtype=float)
print ("Autovalor máximo: ", metodo_potencia(A, u_max, max_iter, tol)[0])
print ("Autovector asociado: ", metodo_potencia(A, u_max, max_iter, tol)[1])
print ("Autovectores (NumPy): ", np.linalg.eigvals(A))
print ("Autovector máximo (NumPy): ", np.linalg.eig(A)[1][:, 0])



########### MÉTODO DE LA POTENCIA INVERSA ########### Aλ = λu
def metodo_potencia_inversa (A_inv, u_min, max_iter, tol):

    u_min = u_min / np.linalg.norm(u_min, ord=2)

    for i in range (max_iter):
        u_new = A_inv @ u_min
        lambda_new = np.dot(u_min, u_new) / np.dot(u_min, u_min)

        if u_min @ u_new < 0:
            lambda_min = -lambda_new
        else:
            lambda_min = lambda_new
        u_new = u_new / lambda_min
        
        if np.linalg.norm(u_min - u_new, ord=2) < tol:
            return 1/ lambda_new, u_new
        u_min = u_new
    return 1/ lambda_new, u_new


u_min = np.array([1, 1])
tol = 1e-6
max_iter = 100
A = np.array([[1, 0], [1, 3]], dtype=float)
A_inv = np.linalg.inv(A)
print ("Autovalor mínimo: ", metodo_potencia_inversa(A_inv, u_min, max_iter, tol)[0])
print ("Autovector asociado: ", metodo_potencia_inversa(A_inv, u_min, max_iter, tol)[1])
print ("Autovalores (NumPy): ", np.linalg.eigvals(A))
print("Autovector mínimo (NumPy): ", np.linalg.eig(A_inv)[1][:, 0])
